; Windows API functions declarations.
extern _GetStdHandle@4          
extern _WriteConsoleA@20        
extern _ReadConsoleA@20         
extern _ExitProcess@4           
extern _FindFirstFileA@8       
extern _FindNextFileA@8        
extern _FindClose@4             
extern _SetCurrentDirectoryA@4 
extern _GetCurrentDirectoryA@8 

section .data
    prompt          db      'Enter directory path: ', 0    
    search_pattern  db      '\*.*', 0                       ; Pattern for file search (skips initial '\' later).
    directory_msg   db      'Directory: ', 0                
    newline         db      13, 10, 0                       ; CRLF for a new line in console.
    space           db      ' ', 0                          
    indent          db      '    ', 0                       ; Indentation string (4 spaces) for output formatting.
    dot_dir         db      '.', 0                          
    dotdot_dir      db      '..', 0                         
    buffer_size     equ     260                             ; Buffer size (commonly used max path length).

section .bss
    input_buffer    resb    buffer_size      
    search_path     resb    buffer_size      
    find_data       resb    318             
    find_handle     resd    1               
    chars_written   resd    1              
    chars_read      resd    1            
    console_in      resd    1               
    console_out     resd    1               
    level           resd    1             
    current_dir     resb    buffer_size     

section .text
    global _main

_main:
    ; Set up the function's stack frame.
    push ebp
    mov ebp, esp

    ; Get console handles for I/O.
    push -10                        ; STD_INPUT_HANDLE (-10)
    call _GetStdHandle@4
    mov [console_in], eax           ; Save input handle.

    push -11                        ; STD_OUTPUT_HANDLE (-11)
    call _GetStdHandle@4
    mov [console_out], eax          ; Save output handle.

    ; Save the current directory to restore later.
    push buffer_size                ; Maximum size of directory path.
    push current_dir                ; Buffer to store the current directory.
    call _GetCurrentDirectoryA@8

    push prompt                     ; Pointer to the prompt message.
    call print_string               ; Print the prompt to the console.

    ; Read directory path input.
    push 0                          ; Reserved parameter (must be zero).
    push chars_read                 ; Address to store the number of characters read.
    push buffer_size                ; Maximum number of characters to read.
    push input_buffer               ; Buffer to store the input.
    push dword [console_in]         ; Handle to the standard input.
    call _ReadConsoleA@20

    ; Null terminate input and remove trailing CRLF.
    mov esi, [chars_read]           ; Number of characters read.
    sub esi, 2                      ; Remove CR and LF (2 characters).
    mov byte [input_buffer + esi], 0; Add null terminator to end of string.


    ; Attempt to change the working directory to user input.
    push input_buffer               ; Directory path entered by user.
    call _SetCurrentDirectoryA@4
    test eax, eax                   ; Check if the call succeeded.
    jz .error_exit                  ; Jump to error exit if directory change failed.

    ; Confirm and display the new directory.
    push directory_msg             
    call print_string
    push input_buffer              
    call print_string
    push newline                 
    call print_string

    ; Initialize recursion level to 0.
    mov dword [level], 0

    ; Start scanning the directory recursively.
    call scan_directory


    ; After scanning, restore the original working directory.
    push current_dir
    call _SetCurrentDirectoryA@4

.exit:
    ; Exit the process with code 0 (success).
    push 0
    call _ExitProcess@4

.error_exit:
    ; In case of an error, print a newline and exit with error code.
    push newline
    call print_string
    push 1
    call _ExitProcess@4


; Recursively scans and prints the directory tree.

scan_directory:
    push ebp
    mov ebp, esp

    ; Begin file search in the current directory.
    push find_data                 ; Buffer to receive file data.
    push search_pattern + 1        ; Use "*.*" (skip the first '\' character).
    call _FindFirstFileA@8
    mov [find_handle], eax         ; Save the search handle.
    cmp eax, -1                   ; Check if the search failed.
    je .done                      ; If no files are found, exit the function.

.find_loop:
    ; Check if the current file attribute indicates a directory.
    mov eax, [find_data + 0]
    test eax, 10h                 ; Test the directory attribute flag.
    jz .not_directory             ; Jump if it's not a directory.

    lea esi, [find_data + 44]     ; ESI now points to the file/directory name.
    cmp byte [esi], '.'           ; Check if the name starts with a dot.
    je .next_file               ; Skip if it's "." or ".." (further check could be added).

    ; Print the directory name with indentation.
    mov ecx, [level]              ; Get current recursion level.

.indent_loop:
    test ecx, ecx                 ; Loop until ecx is zero.
    jz .print_dir_name
    push ecx                      ; Save current loop counter.
    push indent                   ; Push the indentation string.
    call print_string           
    pop ecx                       ; Restore loop counter.
    dec ecx                       ; Decrement counter.
    jmp .indent_loop

.print_dir_name:
    push esi                    ; Push the pointer to the directory name.
    call print_string           ; Print the directory name.
    push dword '\'             ; Add a directory separator after the name.
    call print_char
    push newline               
    call print_string

    ; Recursively scan this subdirectory.
    push dword [level]         ; Save the current level.
    inc dword [level]          ; Increase the recursion level.

    ; Change to the subdirectory.
    push esi                   ; Subdirectory name.
    call _SetCurrentDirectoryA@4

    call scan_directory        ; Recursively scan the new subdirectory.

    ; After recursion, change back to the parent directory.
    push dotdot_dir            ; Use ".." to move up to the parent directory.
    call _SetCurrentDirectoryA@4

    pop dword [level]          ; Restore the previous recursion level.
    jmp .next_file             ; Continue with next file/directory.

.not_directory:
    mov ecx, [level]

.indent_file_loop:
    test ecx, ecx
    jz .print_filename
    push ecx
    push indent
    call print_string
    pop ecx
    dec ecx
    jmp .indent_file_loop

.print_filename:
    lea esi, [find_data + 44]   ; Get pointer to the file name.
    push esi
    call print_string           ; Print the file name.
    push newline
    call print_string

.next_file:
    push find_data
    push dword [find_handle]
    call _FindNextFileA@8
    test eax, eax               ; If a file is found, continue looping.
    jnz .find_loop

    ; Cleanup: Close the file search handle.
    push dword [find_handle]
    call _FindClose@4

.done:
    mov esp, ebp
    pop ebp
    ret

print_string:
    push ebp
    mov ebp, esp
    push ebx

    ; Calculate the length of the string.
    mov ebx, [ebp + 8]          ; Pointer to the string.
    mov edx, ebx
    xor ecx, ecx                ; Zero the counter.

.count_loop:
    cmp byte [edx], 0           ; Check for null terminator.
    je .count_done
    inc ecx                   ; Increment counter.
    inc edx
    jmp .count_loop

.count_done:
    ; Write the string to the console.
    push 0                      ; Reserved parameter.
    push chars_written          ; Pointer to store the number of characters written.
    push ecx                  ; Length of the string.
    push ebx                  ; Pointer to the string.
    push dword [console_out]    ; Console output handle.
    call _WriteConsoleA@20

    pop ebx
    mov esp, ebp
    pop ebp
    ret 4                     ; Clean up parameter (pointer to the string).

print_char:
    push ebp
    mov ebp, esp
    push ebx

    ; Print one character using WriteConsole.
    push 0                      ; Reserved parameter.
    push chars_written          ; Pointer to store the number of characters written.
    push 1                      ; Length is 1.

    ; Manipulates the stack to pass the address of the character.
    push ebp
    add dword [esp], 8          ; Adjust to point to the character parameter.
    push dword [console_out]    ; Console output handle.
    call _WriteConsoleA@20

    pop ebx
    mov esp, ebp
    pop ebp
    ret 4                     ; Clean up parameter (character).
