section .data
    current_dir db ".", 0
    file_mask db "*.*", 0
    file_found db "File: ", 0
    dir_found db "Directory: ", 0
    newline db 0x0D, 0x0A, 0

section .bss
    ; Reserve 43 bytes for the Disk Transfer Area (DTA)
    dta resb 43

    section .text
    global _start

_start:
    ; Set up the Disk Transfer Area (DTA)
    mov ah, 1Ah          ; DOS function 1Ah: Set Disk Transfer Area address
    lea dx, [dta]        ; Load address of DTA into DX
    int 21h              ; Call DOS interrupt

    ; Find the first file in the current directory
    mov ah, 4Eh          ; DOS function 4Eh: Find First File
    lea dx, [file_mask]  ; DX points to file mask ("*.*")
    mov cx, 0            ; Attribute filter (0 means no filtering on attributes)
    int 21h              ; Call DOS interrupt
    jc .done             ; If carry flag is set (error), jump to exit

    ; Loop to process each found file/directory
.loop:
    ; Check if the found entry is a directory
    test byte [dta + 21], 10h  ; Test attribute byte at offset 21 for the directory flag (bit 4)
    jnz .is_directory         ; If directory flag is set, jump to .is_directory

    ; If not a directory, then itâ€™s a file:
    mov ah, 09h               ; DOS function 09h: Print string
    lea dx, [file_found]      ; DX points to the "File: " prefix
    int 21h
    jmp .print_name          ; Jump to print the file/directory name

.is_directory:
    ; For directories, print the directory prefix:
    mov ah, 09h               ; DOS function 09h: Print string
    lea dx, [dir_found]       ; DX points to the "Directory: " prefix
    int 21h

.print_name:
    ; Print the name of the file or directory
    mov ah, 09h               ; DOS function 09h: Print string
    lea dx, [dta + 30]        ; DX points to the file/directory name in the DTA (starting at offset 30)
    int 21h

    ; Print a newline after the name
    mov ah, 09h               ; DOS function 09h: Print string
    lea dx, [newline]         ; DX points to the newline sequence
    int 21h

    ; Find the next file/directory
    mov ah, 4Fh               ; DOS function 4Fh: Find Next File
    int 21h
    jnc .loop                 ; If no error (carry flag clear), continue looping

.done:
    ; Exit the program
    mov ah, 4Ch               ; DOS function 4Ch: Terminate program
    int 21h
